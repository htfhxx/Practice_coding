这一篇主要是补充一些动态规划（例如子序列相关、基础状态转移模板题等）相关的常见用法，
纯手打，并经过了调试，如有错误或者更简便巧妙的用法，欢迎评论区指出，谢谢！~

一般动态规划问题，自己的总结，分三步：
1. 划分子问题：dp[i][j]=x  其中i是改变量，j是限定条件（可省），x是要求的结果
2. 找到初始状态，一般是dp[0][j]=0    并且
3. 找到状态转移公式，dp[i][j]=dp[i-1][j]  dp[i][j]=max(...)

//最长递增子序列
int aa[50];
int dp[50];   //表示以index=i为结尾的递增子序列的长度     important！！
dp[0]=1;  //对index=0初始化
for(int i=0;i<k;i++){
	cin>>aa[i];
}
for(int i=1;i<k;i++){  //从index=1开始规划
	int maxN=0;
	for(int j=0;j<=i;j++){   //遍历之前的数组
		if(aa[j]<=aa[i]){    //满足递增规律-->状态转换
			maxN=max(maxN,dp[j]+1);    //选取最合适的状态
		}
	}
	dp[i]=maxN;              //对当前index进行规划
}

int maxN=0;
for(int i=0;i<k;i++){       //找到最大递增子序列
	maxN=max(maxN,dp[i]); 
}
cout<<maxN<<endl;

8
300 207 155 300 299 170 158 65
1 1 1 2 2 2 2 1
2


//最长公共字串
int dp[105][105];  //前i个字符和前j个字符的公共子序列  important！！
char a[105];
char b[105];
for(int i=0;i<strlen(a);i++)   //初始状态
	dp[i][0]=0;
for(int i=0;i<strlen(b);i++)
	dp[0][i]=0;

for(int i=1;i<=strlen(a);i++){  //注意从1开始，从strlen(a)结束，前i个
	for(int j=1;j<=strlen(b);j++){
		if(a[i-1]==b[j-1])dp[i][j]=dp[i-1][j-1]+1;
		else {
			dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
		}
	}
}

cout<<dp[strlen(a)][strlen(b)]<<endl;  //最终输出的是dp[L1][L2]，而不是dp[L1-1][L2-1]



//0-1背包问题
//给定允许采摘的最长时间T，药数M,各药的采摘时间和价值，求最大价值。
//0-1背包有个变化，将最长时间T改为，恰好为T---->这种情况只需要改变初始状态即可，状态转移不变

https://www.nowcoder.com/practice/d7c03b114f0541dd8e32ce9987326c16?tpId=40&tqId=21406&tPage=1&rp=1&ru=/ta/kaoyan&qru=/ta/kaoyan/question-ranking

struct Med{
    int t;
    int v;
}med[105];

int dp[105][1005]; //dp[i][j]=x
				   //i代表采摘前i株，j代表限制时间为j，x代表采摘到的价值
int main(){
    int T,M;
    while(cin>>T){
        cin>>M;
        for(int i=1;i<=M;i++)     //建议从1开始
            cin>>med[i].t>>med[i].v;

        for(int i=0;i<M;i++)
            dp[0][i]=0;

        for(int i=1;i<=M;i++){ 
            for(int j=0;j<med[i].t;j++)     //选择此株时不满足采摘条件（t不够）
                dp[i][j]=dp[i-1][j];
            for(int j=med[i].t;j<=T;j++){   //选择此株时采摘or不采摘第i株
                dp[i][j]=max( dp[i-1][j], dp[i-1][j-med[i].t]+med[i].v);
            }
        }
        cout<<dp[M][T]<<endl;
    }
}
















