这一篇主要是补充一些数据结构（例如栈和队列、二叉树、图等）相关的常见用法，
纯手打，并经过了调试，如有错误或者更简便巧妙的用法，欢迎评论区指出，谢谢！~

图论
//并查集
int tree[1005];
int findRoot(int x){
    if(tree[x]==-1)return x;    //找到根节点，就返回根节点的index
    else{
        int tem=findRoot(tree[x]);
        tree[x]=tem;    //路径压缩--在查找某个特定节点的根节点的同时，
						将其与根节点之间的所有节点都直接指向根节点
        return tem;
    }
}

int n,m;
while(cin>>n){
	if(n==0)break;
	for(int i=0;i<n;i++)tree[i]=-1;  //根节点初始化，其根为-1
	cin>>m;
	for(int i=0;i<m;i++){
		int a,b;
		cin>>a>>b;
		a=findRoot(a);
		b=findRoot(b);
		if(a!=b)tree[a]=b;
	}
	int cnt=0;
	for(int i=0;i<n;i++){
		if(tree[i]==-1)cnt++;
	}
	cout<<cnt-1<<endl;
}


//MST 最小生成树   Kruskal算法
struct Edge{  //保存边
    int a,b;    //如果有point结构体的话，
				//建议保存point数组的地址i，而不是整个对象p[i]
    int cost;
    bool operator <(const Edge &e)const{
        return cost<e.cost;
    }
}edge[5050];

int findRoot(int x){  //用于查找某条边的两个顶点是否已连接
    if(tree[x]==-1)return x;
    else{
        int tem=findRoot(tree[x]);
        tree[x]=tem;
        return tem;
    }
}

int main(){
    int n;
    while(cin>>n){
        if(n==0)break;
        for(int i=0;i<n;i++)tree[i]=-1;  //并查集初始化

        for(int i=0;i<n*(n-1)/2;i++)
            cin>>edge[i].a>>edge[i].b>>edge[i].cost;
        sort(edge,edge+n*(n-1)/2);      //排序以方便查找最短路

        int result=0;
        for(int i=0;i<n*(n-1)/2;i++){   //依次遍历最短路，未连接就连接最短路
            int a=findRoot(edge[i].a);
            int b=findRoot(edge[i].b);
            if(a!=b){
                tree[a]=b;
                result+=edge[i].cost;   
            }


        }
        cout<<result<<endl;



    }
    return 0;

}


//最短路径  floyd   基于邻接矩阵
// O(N^3) N<200适用  可求出任意节点对之间距离

for(int i=0;i<n;i++){  //初始化邻接矩阵
	for(int j=0;j<n;j++){
		ans[i][j]=-1;
	}
	ans[i][i]=0;
}
for(int i=0;i<m;i++){   //读入各边权值
	int a,b;
	cin>>a>>b;
	ans[a][b]=ans[b][a]=((int)pow(2,i))%100000;  //双向！！！
}

for(int k=0;k<n;k++){
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			if(ans[i][k]==-1 || ans[k][j]==-1)continue;    //不更新
			if(ans[i][j]==-1 || ans[i][k]+ans[k][j]<ans[i][j]){  //更新
				ans[j][i]=ans[i][j]=ans[i][k]+ans[k][j]; 
			}
		}

	}
}



//最短路 Dijstra  基于邻接链表
// O(N^2)  可求某固定节点到任意节点的距离
struct Edge{
    int next;  //邻接链表的邻接节点
    int cost;
    int distance;
};

vector <Edge> edge[100005];
int dis[1005];
int cost[1005];
bool mark[1005];

int main(){
    int n,m;
    while(cin>>n){
        cin>>m;
        if(m==0 &&n==0)break;
		
		//1-初始化过程
        for(int i=1;i<=n;i++)edge[i].clear();  //一定要记得清空
        for(int i=1;i<=n;i++){       //初始化数组，距离设为-1
            dis[i]=-1;
            cost[i]=-1;
            mark[i]=false;
        }
		
		//2-构建临界矩阵
        for(int i=0;i<m;i++){
            int start,tail;
            cin>>start>>tail;
            Edge tem;
            cin>>tem.distance>>tem.cost;
            tem.next=tail;
            edge[start].push_back(tem);
            tem.next=start;
            edge[tail].push_back(tem);    //双向的输入
        }

        int start,tail;
        cin>>start>>tail;

		//3-选取起点开始寻找最短路径的第二个节点
        dis[start]=0;
        cost[start]=0;
        mark[start]=true;  
        int newP=start;            //选取起点作为第一个点
		
        for(int i=1;i<n;i++){      //遍历n-1次，因为已经选取了一个点
			
			//3.1-主要是更新选定的点到其他节点的距离
            for(int j=0;j<edge[newP].size();j++){
                int get=edge[newP][j].next;
                int d=edge[newP][j].distance;
                int c=edge[newP][j].cost;
                if(mark[get]==true)continue;     //跳过已经选取过的点
                if(dis[get]==-1 || dis[get]>dis[newP]+d     //更新距离
                   ||dis[get]== dis[newP]+d && cost[get]>cost[newP]+c){
                        dis[get]=dis[newP]+d;
                        cost[get]=cost[newP]+c;
                        //cout<<"++++"<<endl;
                }
            }
			//3.2-找到下一个选定的点-->到其他节点的距离最近
            int mind=123123123;
            for(int j=1;j<=n;j++){
                if(mark[j]==true)continue;
                if(dis[j]==-1)continue;  //考虑无穷大距离的可能
                if(dis[j]<mind){
                    newP=j;     //选定节点
                    mind=dis[j];
                }
            }
            mark[newP]=true;

        }
        cout<<dis[tail]<<" "<<cost[tail]<<endl;
		
    }
    return 0;

}

//判断DAG有向无环图
vector<int> edge[105];
int rudu[105];
queue <int> Q;
int main(){
    int n,m;
    while(cin>>n){
        cin>>m;
        if(n==0 && m==0)break;
		
		//初始化
        for(int i=0;i<n;i++){
            rudu[i]=0;
            edge[i].clear();
        }
        while(Q.empty()==false)Q.pop();

		//输入，构建邻接链表
        for(int i=0;i<m;i++){
            int s,t;
            cin>>s>>t;
            edge[s].push_back(t);
            rudu[t]++;
        }

		//队列存放入度为0的节点
        for(int i=0;i<n;i++){
            if(rudu[i]==0)Q.push(i);
        }
		
		删除入度为0节点
        int cnt=0;
        while(Q.empty()==false){
            int tem=Q.front();
            Q.pop();
            cnt++;
            for(int i=0;i<edge[tem].size();i++){
                rudu[edge[tem][i]]--;
                if(rudu[edge[tem][i]]==0)
                    Q.push(edge[tem][i]);
            }
        }
        if(cnt==n)cout<<"YES"<<endl;
        else cout<<"NO"<<endl;
    }
    return 0;

}






























